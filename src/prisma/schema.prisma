// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  tweets        Tweet[]
  twitterCredentials TwitterCredentials?
}

model TwitterCredentials {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  userId        String @unique @db.ObjectId
  apiKey        String
  apiKeySecret  String
  accessToken   String
  accessSecret  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Tweet {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  text        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String    @db.ObjectId
  
  // Scheduling and status fields
  scheduledAt DateTime?  // When the tweet should be published
  publishedAt DateTime?  // When the tweet was actually published
  status     TweetStatus @default(DRAFT)
  
  // Optional metadata
  mediaUrls  String[] @default([])   // Array of media attachments URLs
}

enum TweetStatus {
  DRAFT       // Still editing
  SCHEDULED   // Ready to be published at scheduledAt
  PUBLISHED   // Successfully published
  FAILED      // Failed to publish
}